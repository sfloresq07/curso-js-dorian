¿Qué es Javascript?

Es un lenguaje de programación.
Lo creó Brendan Eich en una semana.
Es el único lenguaje de programación que puede interpretar el navegador.
El nombre se le puso porque en ese momento estaba de moda Java.
JavaScript ha sido mal visto desde su inicio hasta el 2009  aproximadamente.
Hasta 2009 se podía utilizar sólo del lado del cliente. Actualmente con 
Node.js podemos ejecutarlo en un servidor.

HISTORIA DE JAVASCRIPT

1995 - Netscape crea JavaScript
1997 - Netscape se lleva JavaScript a ECMA (European Computer Manufacturers 
Association)
1997 - Se lanza el estándar ECMA-262 y se crea ECMAScript 1.0
1998 - ECMAScript2 - Ajuste con el estándar internacional
1999 - ECMAScript3
2009 - ECMAScript5
2011 - ECMAScript5.1
2015 - ECMAScript6

TECNOLOGÍAS DESCENDIENTES DE JAVASCRIPT

Tecnologías Independientes

-AJAX
-jQuery
-nodeJS
-JSON

Frameworks

-Angular
-React
-VueJs

DONDE ESCRIBIR CÓDIGO

Se necesita un editor de texto, no un procesador de texto, por lo que word no sirve
Existen varias alternativas:
	-La consola del navegador directamente
	-Instalar Node.js
	-Sublime Text
	-Atom
	-Visual Studio Code
	-Brackets
	-Notepad++
	-Bloc de notas

SINTAXIS DE JAVASCRIPT

Es case sensitive: Distingue las mayusculas de las minusculas
	Numero no es igual numero
Es de tipado débil o dinámico
	Las variables son del tipo de dato que almacenen
Las sentencias finalizan con punto y coma (;)
	No es obligatorio pero es muy recomendable
Los bloques finalizan con llave de cierre (})
	De forma opcional se puede añadir un ; después de }

VARIABLES Y CONSTANTES / SCOPE O ÁMBITO

Una varible es un espacio que reservamos en memoria para almacenar un dato que podrá
cambiar durante la ejecución de nuestro programa.

La palabra reservada para declarar variables es "let" no es recomendable usar "var"

Las variables se pueden declarar, inicializar y modificar.

Una constante es un espacio que reservamos en memoria para almacenar un dato que no
cambiará durante la ejecución de nuestro programa.
La palabra reservada para declarar constantes es "const"

Scope o ámbito es la zona donde existe nuestra variableo constante.

DECLARACIÓN, INICIALIZACIÓN Y MODIFICACIÓN

Una variable se declara con la siguiente estructura:
	let numero;
Una variable se inicializa con la siguiente estructura:
	mumero = 5
Se puede declarar e inicializar en la misma sentencia:
	let numero = 5
Para modificar el valor de una variable existente:
	numero = 3
Las constantes solo admiten la declaración e inicialización en la misma sentencia
	const PI = 3.14;

TIPOS DE DATOS EN JAVASCRIPT

Primitivos:
	-Numeros -> let numero = 5;
	-Strings (cadenas) -> let palabra = 'hola' ; let palabra "hola";
	-Boolean -> let respuesta = true; let respuesta = false;
	-Undefined
	-Null
	-Symbol

OPERADORES EN JAVASCRIPT

MATEMÁTICOS

Suma / Concatenación 		+
Resta				-
Multiplicación			*
División			/
Módulo				%

ASIGNACIÓN

Asignación			=
Suma y asignación		a+=3(a=a+3)
Resta y asignación		a-=3(a=a-3)
Multiplicación y asignación	a*=3(a=a*3)	
División y asignación		a/=2(a=a/2)
Módulo y asignación		a%=2(a=a%2)

INCREMENTO / DECREMENTO

Post-incremento en 1		a++
Pre-incremento en 1		++a
Post-decremento en 1		a--
Pre-decremente en 1		--a

MÉTODOS Y PROPIEDADES DE LOS STRING

Método: Es todo aquello que la cadena puede hacer. Ej: convertirse en mayúsculas
Propiedad: Son las caraterísticas que la cadena tiene por ser una cadena. Ej: longitud

Se emplean usando nomenclatura del punto:

	cadena.método
	cadena.propiedad

Strings 

let cadena = "Hola Mundo";

Propiedades:

length -> Devuelve la longitud de la cadena

prototype -> Le permite agregar propiedades y métodos a un objeto

constructor -> Devuelve la función constructora de la cadena.

Metodos:

Todos los metodos devuelven una cadena nueva, la cadena
original no será modificada.

toUpperCase() -> Devuelve la cadena en mayúsculas

toLowerCase() -> Devuelve la cadena en minúscula

indexOf(string) -> Devuelve la posición en la que se encuentra
el string, si no lo encuentra devuelve -1 (Devuelve solo la
primera coincidencia)

replace(valor a buscar, valor nuevo) -> Reemplaza el fragmento
de la cadena que le digamos y pone el nuevo valor.

substring(inicio [,fin]) -> Extrae los caracteres desde inicio
hasta fin (el final no se excluye)
Sino se incluye el fin extrae hasta el final.

slice(inicio [,fin]) -> Igual que substring pero admite valores
negativos, si ponemos valores negativos empezará desde atras
Si no se incluye el final extrae hasta el final.

trim()-> Elimina los espacios al inicio y al final de la cadena.

--ES6-- 
ECMAScript 2015 fue la segunda revisión importante de 
JavaScript. ECMAScript 2015 también se conoce como 
ES6 y ECMAScript 6. Este capítulo describe las funciones más 
importantes de ES6.

ECMAScript es la especificación que este estándar representa. 
ECMAScript proporciona las reglas, detalles y directrices 
del lenguaje

startsWith(valor [,inicio]) -> Sirve para saber si la cadena
empieza con ese valor. Devuelve true o false

endsWith(valor[,longitud]) -> Sirve para saber si la cadena
termina con ese valor. Devuelve true o false

includes(valor[,inicio]) Igual que indexOf pero devuelve true
o false

repeat (valor) -> Repite el string el número de veces que le
indiquemos.

charAt() -> Devuelve el carácter en un índice 
especificado (posición)

charCodeAt() -> Devuelve el Unicode del carácter en un 
índice especificado

concat() -> Devuelve dos o más cadenas unidas

fromCharCode -> Devuelve valores Unicode como caracteres

lastIndexOf() -> Devuelve valores Unicode como caracteres

localeCompare -> Compara dos cadenas en la configuración 
regional actual

match() -> Busca en una cadena un valor o una expresión 
regular y devuelve las coincidencias 

search() -> Busca un valor o una expresión regular en 
una cadena y devuelve el índice (posición) de la coincidencia

split() -> Divide una cadena en una matriz de subcadenas

substr() -> Extrae una cantidad de caracteres de una cadena, 
desde un índice de inicio (posición)

toLocaleLowerCase() -> Devuelve una cadena convertida a 
letras minúsculas, utilizando la configuración regional del host

toLocaleUpperCase() -> Devuelve una cadena convertida a 
letras mayúsculas, utilizando la configuración regional del host

toString() -> Devuelve una cadena o un objeto de cadena como 
una cadena

valueOf() -> Devuelve el valor primitivo de una cadena o un 
objeto de cadena

OBJETO MATH

Es un objeto que se utiliza para operaciones matemáticas más 
específicas. Al ser un objeto también utiliza la nomenclatura 
del punto. Y para usarse tiene que ser por su nombre.

Propiedades:
	Math.E 
	Math.Pi

Métodos:
	Math.abs(x) Devuelve el valor absoluto de x.
	Math.acos(x) Devuelve el arcocoseno de x, en radianes.
	Math.acosh(x) Devuelve el arcocoseno hiperbólico de x.
	Math.asin(x) Devuelve el arcoseno de x, en radianes.
	Math.asinh(x) Devuelve el arcoseno hiperbólico de x.
	Math.atan(x) Devuelve la arcotangente de x como un 
	valor numérico entre -PI/2 y PI/2 radianes
	Math.atan2(y, x) Devuelve el arcotangente del cociente 
	de sus argumentos.
	Math.atanh(x) Devuelve la arcotangente hiperbólica de x.
	Math.cbrt(x) Devuelve la raíz cúbica de x.
	Math.ceil(x) Devuelve el entero más grande mayor o igual 
	que un número.
	Math.clz32(x) Devuelve el número de ceros iniciales en 
	una representación binaria de 32 bits de x.
	Math.cos(x) Devuelve el coseno de x (x está en radianes).
	Math.cosh(x) Devuelve el coseno hiperbólico de x.
	Math.exp(x) Devuelve el valor de Ex
	Math.expm1(x) Devuelve el valor de Ex menos 1.
	Math.floor(x) Devuelve el entero más pequeño menor o 
	igual que un número.
	Math.fround(x) Devuelve la representación flotante más 
	cercana (precisión simple de 32 bits) de un número.
	Math.log(x) Devuelve el logaritmo natural de x.
	Math.log10(x)	Returns the base-10 logarithm of x.
	Math.log1p(x)	Returns the natural logarithm of 1 + x.
	Math.log2(x)	Returns the base-2 logarithm of x.
	Math.max(x, y, z, ..., n) Devuelve el número con el 
	valor más alto.
	Math.min(x, y, z, ..., n) Devuelve el número con el 
	valor más bajo.	
	Math.pow(x,y) Devuelve la potencia de x elevado a y.
	Math.random() Genera un número pseudoaleatorio entre 
	0 y 1.
	Math.round(x) Devuelve el valor de un número redondeado 
	al entero más cercano.
	Math.sign(x) Devuelve el signo de un número (comprueba
	si es positivo con un 1, negativo con un -1 y cero).
	Math.sin(x) Devuelve el seno de x (x está en radianes).
	Math.sinh(x) Devuelve el seno hiperbólico de x.
	Math.sqrt(x) Devuelve la raiz cuadrada de x.
	Math.tan(x) Devuelve la tangente de un ángulo.
	Math.tanh(x) Devuelve la tangente hiperbólica de un 
	número.
	Math.trunc(x) Devuelve la parte entera de un número (x).
	
	
FLUJO DE UN PROGRAMA

El flujo de un programa siempre será de arriba abajo

let num = 2;			|	Estructuras de control de flujo: 
				|		-Condicionales	
console.log(num);		|			-Simples
				|			-Compuestos
num = 5;			|			-Múltiples
				|		-Bucles
console.log(num)		|			-Determinados
				|			-Indeterminados
let word = "Hola Mundo";	|
				|
console.log(word);		|
				˅

ESTRUCTURA IF - ELSE

Sintaxis:
	Condición Simple:
		if(condición) // codigo a ejecutar
		if(condición){
			//código a ejecutar1 		       
			//código a ejecutar2
			...
			}

	Condición compuesta:
		if(condición) // código a ejecutar
		else//código a ejecutar


ESTRUCTURA SWITCH

Se utiliza para elegir un camino de varios preestablecidos. Tenemos 2
tipos principales:

Sintaxis simple:		|		Sintaxis múltiple:		
	switch(evaluacion){	|		switch(evaluacion){
	case n1:		|		case n1:
	//código		|		case n2:
	break;			|		case n3:
	case n2:		|		//código
	//codigo		|		break;
	break;			|		default:
	default:		|		//código
	//código		|		}
	}			|

OPERADOR TERNARIO

Se utiliza cuando una condición será true o false, al igual que 
if. Su ejecución puede tener una o varias sentencias, en caso 
iran separadas por comas y entre paréntesis.

Sintaxis:

(condición) ? true : false

(condición) ? 
	(primera sentencia,
	segunda sentencia)
	:
	(primera sentencia,
	segunda sentencia)

NOTA: No es obligatorio que si el true tiene varias sentencias 
el false tenga la misma cantidad.

ARRAYS

-Son estructuras que nos permiten almacenar varios datos y agruparlos.
-Se pueden llenar con cualquier tipo de dato válido en JavaScript y 
deben ir separados por comas.
-Se pueden mezclar tipos de datos, pero no es recomendable.
-Se declaran con llaves cuadradas o corchetes [].
-Pueden declararse vacíos o con un contenido ya establecido.
-Pueden añadirse o eliminarse elementos en el momento que queramos.

let número = 5

let array = []

let números = [¨1,2,3,4,5]

-Cada uno de los elementos podrá ser identificado por su índice, es
decir su posición.
-Los índices empiezan a contar desde 0.

	|1|2|3|4|5|
	|0|1|2|3|4|

Propiedades de Array:

	Array.length Devuelve el número de posiciones que 
	contiene el array.
	Array.constructor Devuelve la función que creó el 
	prototipo del objeto Array.
	Array.prototipo Le permite agregar propiedades y 
	métodos a un objeto Array

Métodos de Array:
	
	.concat() Une dos o más matrices y devuelve una 
	copia de las matrices unidas.
	.copyWithin() Copia elementos de matriz dentro 
	de la matriz, hacia y desde posiciones especificadas.
	.entries() Devuelve un par clave/valor Array Iteration
	Object.
	.every () Comprueba si todos los elementos de una matriz 
	pasan una prueba.
	.fill() Rellena los elementos de una matriz con un 
	valor estático.
	filter() Crea una nueva matriz con cada elemento de una 
	matriz que pasa una prueba.
	.find() Devuelve el valor del primer elemento en una 
	matriz que pasa una prueba.
	.findIndex() Devuelve el índice del primer elemento en 
	una matriz que pasa una prueba.
	.forEach() Llama a una función para cada elemento de 
	la matriz.
	.from() Crea una matriz a partir de un objeto.
	.includes () Comprueba si una matriz contiene el 
	elemento especificado.
	.indexOf()	Devuelve el primer índice del elemento
	que coincida con el valor especificado, o -1 si ninguno
	es encontrado.
	.isArray(variable a evaluar) Devuelve true si la
	variable es un array de lo contrario devuelve false.
	.join("separador")	Devuelve un string con el
	separador que indiquemos, por defecto son comas.
	keys() Devuelve un objeto de iteración de matriz, que 
	contiene las claves de la matriz original.
	.lastIndexOf()	Devuelve el último índice del elemento
	que coincida con el valor especificado, o -1 si ninguno
	es encontrado.
	.map() Crea una nueva matriz con el resultado de llamar 
	a una función para cada elemento de la matriz.
	.pop()	Elimina el último elemnto de un array y
	devuelve ese elemento.
	.pus(element1, element2,...)	Añade uno o más elementos
	al final del array y devuelve la nueva longitud.
	.reduce () Reduce los valores de una matriz a un solo 
	valor (de izquierda a derecha).
	.reduceRight() Reduce los valores de una matriz a un solo 
	valor (yendo de derecha a izquierda).
	.reverse()	Invierte el orden de los elementos del
	array.
	.shift()	Elimina el primer elmento del array y
	devuelve ese elemento.
	.slice(a,b)	Extrae elementos de un array desde el 
	índice a hasta el índice b. Si no existe b lo hace desde
	a hasta el final, si no existe ni a ni b hace una copia
	original.
	.some()	Comprueba si alguno de los elementos de una 
	matriz pasa una prueba.
	.sort() Ordena los elementos de una matriz.
	.splice(a,b,items)	Cambia el contenido de un array
	eliminando elementos existentes y/o agregando nuevos.
		a: indice de inicio
		b: número de elementos (opcional)
		items:	Elementos a añadir en el caso que se 
		añadan. (Opcional)
	Si b es un valor distinto de 0 elimina el número de 
	valores que le indiquemos en b y añade los valores de 
	items a partir de la posición a.
	Si b vale 0 añade los elementos a partir de la posición	a
	y no elimina ninguno.
	.toString() Convierte una matriz en una cadena y devuelve 
	el resultado
	.unshift(element1, element2,...)	Añade uno o más
	elementos al comienzo del array y devuelve la nueva
	longitud.
	.valueOf() Devuelve el valor primitivo de una matriz.			
	
	
BUCLES

Se usan cuando queremos que un trozo de código se repita.
Existen bucles determinados e indeterminados.
Los determinados se usan cuando especificamos el número de veces
que se va a repetir.
	imprimir números de 1 al 10
Los inderterminados se usan cuando no sabemos el número de veces
que se va a repetir.
	repetir mensaje de introducir contraseña
La estructura de un bucle siempre es la misma.
Sintaxis:
	bucle{
	  código a ejecutar
	}

BUCLE WHILE

Es indeterminado ya que no sabemos cuantas vueltas dará 
durante su ejecución.

Su sintaxis se compone de una única parte
	condición de salida
	
	while(condición){
		código a ejecutar
	}

Nota: Se va a repetir hasta que la codición no se cumpla se
romperá  y pasará al siguiente.

while seria como un "mientras"


BUCLE DO WHILE

Es un bucle indeterminado ya que no sabemos cuantas vueltas
dará durante su ejecución.

Su sintaxis se compone de dos partes
	código a ejecutar
	condición de salida

	do{
	    //código a ejecutar
	}while(condición)

El 'do' se va a ejecutar al menos una vez se cumpla o no se cumpla
y el while si no se cumple no se ejecuta.  

determinados:

BUCLE FOR

Es un bucle determiando ya que hay que especificar cuantas vueltas
dará durante su ejecución.

Su sintaxis se compone de 3 partes:
	Iniciación de variable
	Número de vueltas
	Incremento o decremento

		for(let i=0;i<=10;i++){
		Código a ejecutar
		} 
	
Durante su ejecucuón la variable i  aumentará su valor en 
cada vuelta

		for(let i=0;i<=3;i++){
		console.log(i)
		} 

	1ª vuelta: i=0 - ¿!<=3? - 0 - i++
	2ª vuelta: i=1 - ¿!<=3? - 1 - i++
	3ª vuelta: i=2 - ¿!<=3? - 2 - i++
	4ª vuelta: i=3 - ¿!<=3? - 3 - i++
	5ª vuelta: i=4 - ¿!<=3? - fin del bucle


BUCLE FOR OF / FOR IN

Simplifica el bucle for tradicional sin tener que daler un 
número de vueltas ni realizar un incremento

let names = [`Paco`,`Jose`,`Paula`,`María`]
	
	for(let name of names){
		console.log(name)
	}

	
	1ª vuelta: Paco
	2ª vuelta: José
	3ª vuelta: Paula
	4ª vuelta: María


	for(let name of names){
		console.log(name)
	}

	1ª vuelta: 0
	2ª vuelta: 1
	3ª vuelta: 2
	4ª vuelta: 3

For in esta más indicado para recorrer objetos, 
pero se puede recorrer array y dara el numero de la posición 
y no el valor.

Palabras reservadas de bucles:

break	Rompe el bucle
continue	Se salta la posicion que le indiquemos y despues
continúa su ejecución.

OBJETOS . INTRODUCCIÓN

Son estructuras de datos que representan propiedades, valores
y acciones que pueden realizar el objeto.
Todos los objetos tienen propiedades o atributos y comportamientos
o acciones representados por pares de clave (key) : valor (value)

Los comportamientos se representan a través de funciones.

Para acceder a las propiedades y acciones del ibjeto se utiliza
la nomenclatura del punto.

FUNCIONES INTRODUCCION

Son fragmetnos dew código que escribimos para ejecutar una tarea
y no volver a escribir el mismo código más de una vez. 
Nos ayudan a modularizar el código
Las funciones deben realizar una sola tarea.
 Sintaxis:

function nombrefuncion(){
	//código a ejecutar
}

const nombrefuncion = () =>{
	//código a ejecutar
}

Pueden recibir parámetros:

function nombrefuncion(parametro1, parametro2){
	//código a ejecutar
}

const nombrefuncion = (parametro1, parametro2) =>{
	//código a ejecutar
}

Pueden devolver valores:

function nombrefuncion(parametro1, parametro2){
	return parametro1+parametro2
}

const nombrefuncion = (parametro1, parametro2) => parametro1+parametro2




