¿Qué es Javascript?

Es un lenguaje de programación.
Lo creó Brendan Eich en una semana.
Es el único lenguaje de programación que puede interpretar el navegador.
El nombre se le puso porque en ese momento estaba de moda Java.
JavaScript ha sido mal visto desde su inicio hasta el 2009  aproximadamente.
Hasta 2009 se podía utilizar sólo del lado del cliente. Actualmente con 
Node.js podemos ejecutarlo en un servidor.

HISTORIA DE JAVASCRIPT

1995 - Netscape crea JavaScript
1997 - Netscape se lleva JavaScript a ECMA (European Computer Manufacturers 
Association)
1997 - Se lanza el estándar ECMA-262 y se crea ECMAScript 1.0
1998 - ECMAScript2 - Ajuste con el estándar internacional
1999 - ECMAScript3
2009 - ECMAScript5
2011 - ECMAScript5.1
2015 - ECMAScript6

TECNOLOGÍAS DESCENDIENTES DE JAVASCRIPT

Tecnologías Independientes

-AJAX
-jQuery
-nodeJS
-JSON

Frameworks

-Angular
-React
-VueJs

DONDE ESCRIBIR CÓDIGO

Se necesita un editor de texto, no un procesador de texto, por lo que word no sirve
Existen varias alternativas:
	-La consola del navegador directamente
	-Instalar Node.js
	-Sublime Text
	-Atom
	-Visual Studio Code
	-Brackets
	-Notepad++
	-Bloc de notas

SINTAXIS DE JAVASCRIPT

Es case sensitive: Distingue las mayusculas de las minusculas
	Numero no es igual numero
Es de tipado débil o dinámico
	Las variables son del tipo de dato que almacenen
Las sentencias finalizan con punto y coma (;)
	No es obligatorio pero es muy recomendable
Los bloques finalizan con llave de cierre (})
	De forma opcional se puede añadir un ; después de }

VARIABLES Y CONSTANTES / SCOPE O ÁMBITO

Una varible es un espacio que reservamos en memoria para almacenar un dato que podrá
cambiar durante la ejecución de nuestro programa.

La palabra reservada para declarar variables es "let" no es recomendable usar "var"

Las variables se pueden declarar, inicializar y modificar.

Una constante es un espacio que reservamos en memoria para almacenar un dato que no
cambiará durante la ejecución de nuestro programa.
La palabra reservada para declarar constantes es "const"

Scope o ámbito es la zona donde existe nuestra variableo constante.

DECLARACIÓN, INICIALIZACIÓN Y MODIFICACIÓN

Una variable se declara con la siguiente estructura:
	let numero;
Una variable se inicializa con la siguiente estructura:
	mumero = 5
Se puede declarar e inicializar en la misma sentencia:
	let numero = 5
Para modificar el valor de una variable existente:
	numero = 3
Las constantes solo admiten la declaración e inicialización en la misma sentencia
	const PI = 3.14;

TIPOS DE DATOS EN JAVASCRIPT

Primitivos:
	-Numeros -> let numero = 5;
	-Strings (cadenas) -> let palabra = 'hola' ; let palabra "hola";
	-Boolean -> let respuesta = true; let respuesta = false;
	-Undefined
	-Null
	-Symbol

OPERADORES EN JAVASCRIPT

MATEMÁTICOS

Suma / Concatenación 		+
Resta				-
Multiplicación			*
División			/
Módulo				%

ASIGNACIÓN

Asignación			=
Suma y asignación		a+=3(a=a+3)
Resta y asignación		a-=3(a=a-3)
Multiplicación y asignación	a*=3(a=a*3)	
División y asignación		a/=2(a=a/2)
Módulo y asignación		a%=2(a=a%2)

INCREMENTO / DECREMENTO

Post-incremento en 1		a++
Pre-incremento en 1		++a
Post-decremento en 1		a--
Pre-decremente en 1		--a

MÉTODOS Y PROPIEDADES DE LOS STRING

Método: Es todo aquello que la cadena puede hacer. Ej: convertirse en mayúsculas
Propiedad: Son las caraterísticas que la cadena tiene por ser una cadena. Ej: longitud

Se emplean usando nomenclatura del punto:

	cadena.método
	cadena.propiedad

OBJETO MATH

Es un objeto que se utiliza para operaciones matemáticas más específicas.
Al ser un objeto también utiliza la nomenclatura del punto.
Y para usarse tiene que ser por su nombre.

Propiedades:
	Math.E - Math.Pi

Métodos:
	Math.abs(x) Devuelve el valor absoluto de x.
	Math.celi(x) Devuelve el entero más grande mayor o igual que un número.
	Math.floor(x) Devuelve el entero más pequeño menor o igual que un número.
	Math.pow(x,y) Devuelve la potencia de x elevado a y.
	Math.sqrt(x) Devuelve la raiz cuadrada de x.
	Math.random() Genera un número pseudoaleatorio entre 0 y 1.
	Math.round(x) Devuelve el valor de un número redondeado al entero más cercano.
	Math.sign(x) Devuelve el signo de la x, que indica si x es positivo, negativo o cero.

	
FLUJO DE UN PROGRAMA

El flujo de un programa siempre será de arriba abajo

let num = 2;			|	Estructuras de control de flujo: 
				|		-Condicionales	
console.log(num);		|			-Simples
				|			-Compuestos
num = 5;			|			-Múltiples
				|		-Bucles
console.log(num)		|			-Determinados
				|			-Indeterminados
let word = "Hola Mundo";	|
				|
console.log(word);		|
				˅

ESTRUCTURA IF - ELSE

Sintaxis:
	Condición Simple:
		if(condición) // codigo a ejecutar
		if(condición){
			//código a ejecutar1 		       
			//código a ejecutar2
			...
			}

	Condición compuesta:
		if(condición) // código a ejecutar
		else//código a ejecutar


ESTRUCTURA SWITCH

Se utiliza para elegir un camino de varios preestablecidos. Tenemos 2
tipos principales:

Sintaxis simple:		|		Sintaxis múltiple:		
	switch(evaluacion){	|		switch(evaluacion){
	case n1:		|		case n1:
	//código		|		case n2:
	break;			|		case n3:
	case n2:		|		//código
	//codigo		|		break;
	break;			|		default:
	default:		|		//código
	//código		|		}
	}			|

OPERADOR TERNARIO

Se utiliza cuando una condición será tru o false, al igual que if.
Su ejecución puede tener una o varias sentencias, en caso iran separadas
por comas y entre paréntesis.

Sintaxis:

(condición) ? true : false

(condición) ? 
	(primera sentencia,
	segunda sentencia)
	:
	(primera sentencia,
	segunda sentencia)

NOTA: No es obligatorio que si el true tiene varias sentencias el false
tenga la misma cantidad.

ARRAYS

-Son estructuras que nos permiten almacenar varios datos y agruparlos.
-Se pueden llenar con cualquier tipo de dato válido en JavaScript y 
deben ir separados por comas.
-Se pueden mezclar tipos de datos, pero no es recomendable.
-Se declaran con llaves cuadradas o corchetes [].
-Pueden declararse vacíos o con un contenido ya establecido.
-Pueden añadirse o eliminarse elementos en el momento que queramos.

let número = 5

let array = []

let números = [¨1,2,3,4,5]

-Cada uno de los elementos podrá ser identificado por su índice, es
decir su posición.
-Los índices empiezan a contar desde 0.

	|1|2|3|4|5|
	|0|1|2|3|4|



